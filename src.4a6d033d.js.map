{"version":3,"sources":["index.js"],"names":[],"mappings":";;;AAAA,aAAA,QAAA","file":"src.4a6d033d.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n//задача\n// let second = 0;\n// let intervalId;\n// const refs = {\n//     hours: document.querySelector('#hours'),\n//     minutes: document.querySelector('#minutes'),\n//     seconds: document.querySelector('#seconds'),\n//     targetTimer: document.querySelector('#target-timer'),\n//     save: document.querySelector('#save'),\n// };\n\n// function convertS(s) {\n//   const hours = Math.floor(s / 60 / 60);\n//   s = s - 60 * 60 * hours;\n//   const minutes = Math.floor(s / 60);\n//   s = s - 60 * minutes;\n//   const seconds = s;\n//   refs.hours.innerHTML = hours.toString().padStart(2, 0);\n//   refs.minutes.innerHTML = minutes.toString().padStart(2, 0);\n//   refs.seconds.innerHTML = seconds.toString().padStart(2, 0);\n// }\n\n// // setInterval(() => {\n// //   secund += 1;\n// //   convertS(secund);\n// // }, 1000);\n\n// refs.save.addEventListener('click', (e) => {\n//     imitatedServer('times')\n//         .then(res => {\n//             console.log(res);\n//             const times = res === null ? [] : res;\n//             // second - это временная метка (тип number)\n//             times.push(second);\n//             return times;\n//         })\n//         .then(times => imitatedServer(\"times\", \"SET\", times))\n//         .catch();\n\n// } );\n\n// refs.targetTimer.addEventListener('click', onTimerClick);\n\n// function onTimerClick(e) {\n//   if (e.target.textContent === 'Stop') {\n//     clearInterval(intervalId);\n//     e.target.textContent = 'Start';\n//   } else {\n//     intervalId = setInterval(() => {\n//       second += 1;\n//       convertS(second);\n//     }, 1000);\n//     e.target.textContent = 'Stop';\n//   }\n// };\n\n\n// const imitatedServer = (key, type = 'GET', data = {}) => {\n//     const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n//     return new Promise((res, rej) => {\n//         setTimeout(() => {\n//             if (Math.random() > 0.2) {\n//                 if (type === 'GET') {\n//                     res(JSON.parse(localStorage.getItem(key)));\n//                 } else if (type === 'SET') {\n//                     localStorage.setItem(key, JSON.stringify(data))\n//                     res(true)\n//                 } else {\n//                     rej('invalid type')\n//                 }\n//             } else rej('oops!!!')\n//         }, getRandomInt(1000, 5000))\n//     })\n// }\n\n// function printTimesStemp(s) {\n//     const hours = Math.floor(s / 60 / 60);\n//     s = s - 60 * 60 * hours;\n//     const minutes = Math.floor(s / 60);\n//     s = s - 60 * minutes;\n//     const seconds = s;\n//     refs.targetTimer.insertAdjacentHTML('beforeend', `<li>${hours.toString().padStart(2, 0)}:${minutes.toString().padStart(2, 0)}:${seconds.toString().padStart(2, 0)}</li>`);\n// };\n\n// imitatedServer('times').then(times => {\n//     if (times === 0) return;\n//     times.forEach(printTimesStemp);\n// }).catch(console.log);\n\n// добавить возможность удалять сохранённые точки\n// добавить возможность начинять отсчет с сохранённой точки\n//-------------------------------------------------------------\n\n//---------------------------PRACTICE----------------------------\n"]}