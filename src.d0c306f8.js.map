{"version":3,"sources":["index.js"],"names":["intervalId","second","refs","hours","document","querySelector","minutes","seconds","targetTimer","save","convertS","s","Math","floor","innerHTML","toString","padStart","onTimerClick","e","target","textContent","clearInterval","setInterval","addEventListener","imitatedServer","then","res","console","log","times","push","catch","key","type","data","Promise","rej","setTimeout","random","JSON","parse","localStorage","getItem","setItem","stringify","min","max","getRandomInt","printTimesStemp","insertAdjacentHTML","forEach"],"mappings":";;;AA6FA,aA7FA,QAAA,oBAGA,IACIA,EADAC,EAAS,EAEb,MAAMC,EAAO,CACTC,MAAOC,SAASC,cAAc,UAC9BC,QAASF,SAASC,cAAc,YAChCE,QAASH,SAASC,cAAc,YAChCG,YAAaJ,SAASC,cAAc,iBACpCI,KAAML,SAASC,cAAc,UAGjC,SAASK,EAASC,GACVR,MAAAA,EAAQS,KAAKC,MAAMF,EAAI,GAAK,IAClCA,GAAQ,KAAUR,EACZG,MAAAA,EAAUM,KAAKC,MAAMF,EAAI,IAEzBJ,EADNI,GAAQ,GAAKL,EAEbJ,EAAKC,MAAMW,UAAYX,EAAMY,WAAWC,SAAS,EAAG,GACpDd,EAAKI,QAAQQ,UAAYR,EAAQS,WAAWC,SAAS,EAAG,GACxDd,EAAKK,QAAQO,UAAYP,EAAQQ,WAAWC,SAAS,EAAG,GAwB1D,SAASC,EAAaC,GACS,SAAzBA,EAAEC,OAAOC,aACXC,cAAcrB,GACdkB,EAAEC,OAAOC,YAAc,UAEvBpB,EAAasB,YAAY,KAEvBZ,EADAT,GAAU,IAET,KACHiB,EAAEC,OAAOC,YAAc,QAzB3BlB,EAAKO,KAAKc,iBAAiB,QAAUL,IACjCM,EAAe,SACVC,KAAKC,IACFC,QAAQC,IAAIF,GACNG,MAAAA,EAAgB,OAARH,EAAe,GAAKA,EAG3BG,OADPA,EAAMC,KAAK7B,GACJ4B,IAEVJ,KAAKI,GAASL,EAAe,QAAS,MAAOK,IAC7CE,UAIT7B,EAAKM,YAAYe,iBAAiB,QAASN,GAgB3C,MAAMO,EAAiB,CAACQ,EAAKC,EAAO,MAAOC,EAAO,MAGvC,OAAA,IAAIC,QAAQ,CAACT,EAAKU,KACrBC,WAAW,KACHzB,KAAK0B,SAAW,GACH,QAATL,EACAP,EAAIa,KAAKC,MAAMC,aAAaC,QAAQV,KACpB,QAATC,GACPQ,aAAaE,QAAQX,EAAKO,KAAKK,UAAUV,IACzCR,GAAI,IAEJU,EAAI,gBAELA,EAAI,YAbE,EAACS,EAAKC,IAAQlC,KAAKC,MAAMD,KAAK0B,UAAYQ,EAAMD,GAAOA,GAcrEE,CAAa,IAAM,SAI9B,SAASC,EAAgBrC,GACfR,MAAAA,EAAQS,KAAKC,MAAMF,EAAI,GAAK,IAClCA,GAAQ,KAAUR,EACZG,MAAAA,EAAUM,KAAKC,MAAMF,EAAI,IAEzBJ,EADNI,GAAQ,GAAKL,EAEbJ,EAAKM,YAAYyC,mBAAmB,mBAAoB9C,EAAMY,WAAWC,SAAS,EAAG,MAAMV,EAAQS,WAAWC,SAAS,EAAG,MAAMT,EAAQQ,WAAWC,SAAS,EAAG,WAGnKQ,EAAe,SAASC,KAAKI,IACX,IAAVA,GACJA,EAAMqB,QAAQF,KACfjB,MAAMJ,QAAQC","file":"src.d0c306f8.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n//задача\nlet second = 0;\nlet intervalId;\nconst refs = {\n    hours: document.querySelector('#hours'),\n    minutes: document.querySelector('#minutes'),\n    seconds: document.querySelector('#seconds'),\n    targetTimer: document.querySelector('#target-timer'),\n    save: document.querySelector('#save'),\n};\n\nfunction convertS(s) {\n  const hours = Math.floor(s / 60 / 60);\n  s = s - 60 * 60 * hours;\n  const minutes = Math.floor(s / 60);\n  s = s - 60 * minutes;\n  const seconds = s;\n  refs.hours.innerHTML = hours.toString().padStart(2, 0);\n  refs.minutes.innerHTML = minutes.toString().padStart(2, 0);\n  refs.seconds.innerHTML = seconds.toString().padStart(2, 0);\n}\n\n// setInterval(() => {\n//   secund += 1;\n//   convertS(secund);\n// }, 1000);\n\nrefs.save.addEventListener('click', (e) => {\n    imitatedServer('times')\n        .then(res => {\n            console.log(res);\n            const times = res === null ? [] : res;\n            // second - это временная метка (тип number)\n            times.push(second);\n            return times;\n        })\n        .then(times => imitatedServer(\"times\", \"SET\", times))\n        .catch();\n\n} );\n\nrefs.targetTimer.addEventListener('click', onTimerClick);\n\nfunction onTimerClick(e) {\n  if (e.target.textContent === 'Stop') {\n    clearInterval(intervalId);\n    e.target.textContent = 'Start';\n  } else {\n    intervalId = setInterval(() => {\n      second += 1;\n      convertS(second);\n    }, 1000);\n    e.target.textContent = 'Stop';\n  }\n};\n\n\nconst imitatedServer = (key, type = 'GET', data = {}) => {\n    const getRandomInt = (min, max) => Math.floor(Math.random() * (max - min) + min);\n\n    return new Promise((res, rej) => {\n        setTimeout(() => {\n            if (Math.random() > 0.2) {\n                if (type === 'GET') {\n                    res(JSON.parse(localStorage.getItem(key)));\n                } else if (type === 'SET') {\n                    localStorage.setItem(key, JSON.stringify(data))\n                    res(true)\n                } else {\n                    rej('invalid type')\n                }\n            } else rej('oops!!!')\n        }, getRandomInt(1000, 5000))\n    })\n}\n\nfunction printTimesStemp(s) {\n    const hours = Math.floor(s / 60 / 60);\n    s = s - 60 * 60 * hours;\n    const minutes = Math.floor(s / 60);\n    s = s - 60 * minutes;\n    const seconds = s;\n    refs.targetTimer.insertAdjacentHTML('beforeend', `<li>${hours.toString().padStart(2, 0)}:${minutes.toString().padStart(2, 0)}:${seconds.toString().padStart(2, 0)}</li>`);\n};\n\nimitatedServer('times').then(times => {\n    if (times === 0) return;\n    times.forEach(printTimesStemp);\n}).catch(console.log);\n\n// добавить возможность удалять сохранённые точки\n// добавить возможность начинять отсчет с сохранённой точки"]}